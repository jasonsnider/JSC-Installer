#!/bin/bash
 
# Performs basic admin functions against a parbaked project.
# Jason D Snider <jason@jasonsnider.com>

COMMAND=$1
CONFIGURATION=$2

# has a COMMAND been requsted?
if [ $# -lt 1 ]
then
    echo "Usage: $0 {COMMAND} {CONFIGURATION}"
    echo "What would you like to do? (install, status, push, pull)."
    exit
fi

# has a configuration been requested?
if [ $# -ne 2 ]
then
    echo "Usage: $0 {COMMAND} {CONFIGURATION}"
    echo "What configuration would you like to load?"
    exit
fi

#Check for a vaild command
if [ "$COMMAND" != "install" ] && [ "$COMMAND" != "status" ] && [ "$COMMAND" != "push" ] && [ "$COMMAND" != "pull" ]
then
    echo "Invalid Command Argument $COMMAND"
    exit
fi

#Check for a valid configuration
if [ ! -f "config/$CONFIGURATION" ]
then
    echo 'The config file could not be found'
    exit
else
    echo 'Loading configuration...'
    source "config/$CONFIGURATION"
fi

echo "The installer is running with the $COMMAND command"

# Remove all project files and reinstall them from the repositories
if [ "$COMMAND" == "install" ] 
then
    echo "Removing previous installations as $AS"
    if [ "AS" == "root" ]
    then
        su root
        rm "$PROJECT_PATH/app" -fR
        su $USER
    else
        sudo rm "$PROJECT_PATH/app" -fR
    fi

    for REPO in $REPOS
    do
        IFS=',' read -a array <<< "$REPO"
        if [[ $REPO != --* ]]
        then
            echo "cd $PROJECT_PATH${array[0]} && $PROJECT_PATH${array[0]} && git clone ${array[2]} ${array[1]}"
            cd $PROJECT_PATH${array[0]} && git clone ${array[2]} ${array[1]}
            echo "------------------------------------------------------------"
        else
            echo "${array[0]}"
        fi
    done
fi 

# Pull the latest updates from all repositories
if [ "$COMMAND" == "pull" ]
then
    for REPO in $REPOS
    do
        IFS=',' read -a array <<< "$REPO"
        if [[ $REPO != --* ]]
        then
            echo "cd $PROJECT_PATH${array[0]}/${array[1]} && git pull origin master"
            cd $PROJECT_PATH${array[0]}/${array[1]} && git pull origin master
            echo "------------------------------------------------------------"
        else
            echo "${array[0]}"
        fi
    done
fi

# Check the status of all repositories to which you have write access
if [ "$COMMAND" == "status" ] 
then
    for REPO in $REPOS
    do
		IFS=',' read -a array <<< "$REPO"
		if [[ $REPO != --* ]]
		then
			if [ "${array[3]}" == "write" ] 
			then
				echo "cd $PROJECT_PATH${array[0]}/${array[1]} && git status"
				cd $PROJECT_PATH${array[0]}/${array[1]} && git status
				echo "------------------------------------------------------------"
			fi
		else
			echo "${array[0]}"
		fi
    done
fi

# Push all changes to all repositories to which you have wrte access
if [ "$COMMAND" == "push" ]
then
    for REPO in $REPOS
    do
        IFS=',' read -a array <<< "$REPO"
        if [[ $REPO != --* ]]
        then
            if [ "${array[3]}" == "write" ] 
            then
                    echo "cd $PROJECT_PATH${array[0]}/${array[1]} && git push origin master"
                    cd $PROJECT_PATH${array[0]}/${array[1]} && git push origin master
                    echo "------------------------------------------------------------"
            fi
        else
            echo "${array[0]}"
        fi
    done
fi

if [ "AS" == "root" ]
then
	echo "Setting ownership as root."
	su root

	chown "$APACHE_PROCESS":"$USER" -fR "$PROJECT_PATH"/lib/Cake/Cache -fR
	chown "$APACHE_PROCESS":"$USER" -fR "$PROJECT_PATH"/app/tmp -fR
	chown "$APACHE_PROCESS":"$USER" -fR "$PROJECT_PATH"/app/Vendor/HtmlPurifier/library/HTMLPurifier/DefinitionCache/Serializer -fR
else
	echo "Setting ownership as a sudo'd user."
	sudo chown "$APACHE_PROCESS":"$USER" -fR "$PROJECT_PATH"/lib/Cake/Cache -fR
	sudo chown "$APACHE_PROCESS":"$USER" -fR "$PROJECT_PATH"/app/tmp -fR
	sudo chown "$APACHE_PROCESS":"$USER" -fR "$PROJECT_PATH"/app/Vendor/HtmlPurifier/library/HTMLPurifier/DefinitionCache/Serializer -fR
fi

echo "Done!"
